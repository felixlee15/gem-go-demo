.PHONY: help

TESTDIR?=./...
DOCKER_COMPOSE_FILE?=./deployments/test/docker-compose.yml

help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

start-app: ## go run cmd/api/main.go
	go run cmd/gemdemo/main.go

debug-graphql: ## dlv debug app-api/cmd/appapi -- --task=graphql
	dlv debug app-api/cmd/appapi -- --task=graphql

debug-grpc: ## dlv debug app-api/cmd/appapi -- --task=grpc
	dlv debug app-api/cmd/appapi -- --task=grpc

debug-beat: ## dlv debug app-api/cmd/appapi -- --task=beat
	dlv debug app-api/cmd/appapi -- --task=beat

watch: ## ./scripts/app.sh
	./scripts/app.sh

watch-service: ## ./scripts/service.sh
	./scripts/service.sh

build: ## GOOS=linux GOARCH=amd64 go build -o bin/application -ldflags="-s -w"
	GOOS=linux GOARCH=amd64 go build -o bin/application -ldflags="-s -w"

govet:
	go vet ./...
setup-test:
	@echo "Running setup-test..."
	@docker compose -f $(DOCKER_COMPOSE_FILE) up --wait --quiet-pull || { $(MAKE) cleanup-test; exit 1; }
cleanup-test:
	docker compose -f $(DOCKER_COMPOSE_FILE) down --remove-orphans -v

## Run tests, clean up data on failures and interrupts.
## Example: DB_PORT=5432 REDIS_PORT=6379 make gotest TESTDIR=./internal/app/usecase/coupon ARG=--ginkgo.focus=TEST_CASE_PATTERN
gotest: govet setup-test
	@echo "Starting gotest..."
	@ret=0; \
	trap 'echo "Interrupted! Running cleanup-test..."; $(MAKE) cleanup-test; exit 1' INT; \
	go clean -testcache || { echo "go clean failed"; ret=1; }; \
	MODE=test go test -cover -race $(TESTDIR) $(ARG) || { echo "go test failed"; ret=1; }; \
	$(MAKE) cleanup-test || { echo "cleanup-test failed"; ret=1; }; \
	exit $$ret

debug-gotest: ## Debug all test cases or specific cases - example: make debug-gotest TESTDIR=./internal/app/usecase/theme_page ARG=--ginkgo.focus=TEST_CASE_PATTERN
	go clean -testcache
	MODE=test dlv test $(TESTDIR) -- $(ARG)

generate: remove-generated-gql generate-ent generate-gql cleanup-imports ## Generate ent models and GraphQL endpoints

remove-generated-gql:
	rm ./internal/pkg/graph/generated/federation.go
	rm ./internal/pkg/graph/generated/generated.go
	rm ./internal/pkg/graph/models/models_gen.go

generate-ent: ## Generate ent models
	grep -rl "// Code generated by ent" . --include="*.go" | xargs rm -f
	go generate ./ent

generate-gql: ## Generate GraphQL endpoints
	go generate ./internal/pkg/graph

cleanup-imports: ## Reorder imports after running `generate-gql`, required goimports-reviser to be installed
	find ./internal/app/delivery/graph/ -type f -name "*.resolvers.go" -exec goimports-reviser {} \;

upgrade: ## Update/Upgrade go dependencies
	go get -u github.com/gempages/go-helper@production github.com/gempages/gorpc@production github.com/gempages/go-shopify@master
	go mod tidy

tunnel: ## Open tunnel for localhost:8080
	cloudflared tunnel --url localhost:8080
